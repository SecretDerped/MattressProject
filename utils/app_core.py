import datetime
import os
import time

import streamlit as st
from openpyxl.reader.excel import load_workbook

from utils.tools import config, read_file, side_eval, get_date_str, save_to_file, time_now, create_cashfile_if_empty, \
    load_tasks, print_file


class Page:
    def __init__(self, page_name, icon):
        self.page_name = page_name
        self.icon = icon

        self.employees_cash = config.get('site').get('employees_cash_filepath')
        self.employee_columns_config = {
            "is_on_shift": st.column_config.CheckboxColumn("–ù–∞ —Å–º–µ–Ω–µ", default=False),
            "name": st.column_config.TextColumn("–ò–º—è / –§–∞–º–∏–ª–∏—è", default=''),
            "position": st.column_config.TextColumn("–†–æ–ª–∏", width='medium', default=''),
            "barcode": st.column_config.LinkColumn("–®—Ç—Ä–∏—Ö-–∫–æ–¥", display_text="–û—Ç–∫—Ä—ã—Ç—å", disabled=True),
        }
        create_cashfile_if_empty(self.employee_columns_config, self.employees_cash)

        self.task_cash = config.get('site').get('tasks_cash_filepath')
        self.tasks_columns_config = {
            "high_priority": st.column_config.CheckboxColumn("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", default=False),
            "deadline": st.column_config.DateColumn("–°—Ä–æ–∫",
                                                    format="DD.MM.YYYY",
                                                    step=1,
                                                    default=datetime.date.today()),
            "article": "–ê—Ä—Ç–∏–∫—É–ª",
            "size": "–†–∞–∑–º–µ—Ä",
            "base_fabric": st.column_config.TextColumn("–¢–∫–∞–Ω—å (–í–µ—Ä—Ö / –ù–∏–∑)",
                                                       default='–¢–µ–∫—Å—Ç–∏–ª—å'),
            "side_fabric": st.column_config.TextColumn("–¢–∫–∞–Ω—å (–ë–æ–∫)",
                                                       default='–¢–µ–∫—Å—Ç–∏–ª—å'),
            "photo": st.column_config.ImageColumn("–§–æ—Ç–æ", help="–ö–ª–∏–∫–Ω–∏—Ç–µ, —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å"),
            "comment": st.column_config.TextColumn("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                                                   default='',
                                                   width='small'),
            "springs": st.column_config.TextColumn("–ü—Ä—É–∂–∏–Ω—ã",
                                                   default=''),
            "attributes": st.column_config.TextColumn("–°–æ—Å—Ç–∞–≤ –Ω–∞—á–∏–Ω–∫–∏",
                                                      default='',
                                                      width='medium'),
            "fabric_is_done": st.column_config.CheckboxColumn("–ù–∞—Ä–µ–∑–∞–Ω–æ",
                                                              default=False),
            "gluing_is_done": st.column_config.CheckboxColumn("–°–æ–±—Ä–∞–Ω",
                                                              default=False),
            "sewing_is_done": st.column_config.CheckboxColumn("–ü–æ—à–∏—Ç",
                                                              default=False),
            "packing_is_done": st.column_config.CheckboxColumn("–£–ø–∞–∫–æ–≤–∞–Ω",
                                                               default=False),
            "history": st.column_config.TextColumn("–î–µ–π—Å—Ç–≤–∏—è",
                                                   width='small',
                                                   disabled=True),
            "client": st.column_config.TextColumn("–ó–∞–∫–∞–∑—á–∏–∫",
                                                  default='',
                                                  width='medium'),
            "delivery_type": st.column_config.SelectboxColumn("–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏",
                                                              options=config.get('site').get('delivery_types'),
                                                              default=config.get('site').get('delivery_types')[0],
                                                              required=True),
            "address": st.column_config.TextColumn("–ê–¥—Ä–µ—Å",
                                                   default='–ù–∞—à —Å–∫–ª–∞–¥',
                                                   width='large'),
            "region": st.column_config.SelectboxColumn("–†–µ–≥–∏–æ–Ω",
                                                       width='medium',
                                                       options=config.get('site').get('regions'),
                                                       default=config.get('site').get('regions')[0],
                                                       required=True),
            "created": st.column_config.DatetimeColumn("–°–æ–∑–¥–∞–Ω–æ",
                                                       format="D.MM.YYYY | HH:MM",
                                                       disabled=True),
        }
        create_cashfile_if_empty(self.tasks_columns_config, self.task_cash)

        st.set_page_config(page_title=self.page_name,
                           page_icon=self.icon,
                           layout="wide")

    def header(self):
        st.title(f'{self.icon} {self.page_name}')

    @staticmethod
    def load_tasks():
        return load_tasks()


class ManufacturePage(Page):
    def __init__(self, page_name, icon):
        super().__init__(page_name, icon)
        self.talon_button_text = '–¢–∞–ª–æ–Ω'
        self.label_button_text = '–≠—Ç–∏–∫–µ—Ç–∫–∞'
        self.done_button_text = '–ì–æ—Ç–æ–≤–æ'
        self.label_printer_name = 'Xprinter xp-370b'
        self.header()

    def header(self):
        col1, col2 = st.columns([3, 1])
        with col1:
            st.title(f'{self.icon} {self.page_name}')
        with col2:
            self.employee_choose()

    def employees_on_shift(self, searching_position: str) -> list:
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (position).
        –ß–∏—Ç–∞–µ—Ç .pkl –∏–∑ employees_cash_filepath, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º.
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ "is_on_shift" —Å—Ç–æ–∏—Ç True,
        –∞ –≤ –∫–æ–ª–æ–Ω–∫–µ "position" –µ—Å—Ç—å –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞).

        :returns: [—Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ –ø–æ –∏—Å–∫–æ–º–æ–π —Ä–æ–ª–∏]"""
        dataframe = read_file(self.employees_cash)
        if 'is_on_shift' not in dataframe.columns or 'position' not in dataframe.columns:
            raise ValueError("–í –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'is_on_shift' –∏ 'position'")

        filtered_df = dataframe[(dataframe['is_on_shift'] == True) & (
            dataframe['position'].str.contains(searching_position, case=False, na=False))]

        return filtered_df['name'].tolist()

    @st.experimental_fragment(run_every="4s")
    def employee_choose(self):
        """–í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞.
        –†–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ - —Å—Ç—Ä–æ–∫–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ —Å–º–µ–Ω–µ.
        –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ session_state —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–¥ –∫–ª—é—á–æ–º —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.
        –ü—Ä–∏–º–µ—Ä: st.session_state['—à–≤–µ–π–Ω—ã–π —Å—Ç–æ–ª'] == '–ü–æ–ª–∏–≥—Ä–∞—Ñ –ü–æ–ª–∏–≥—Ä–∞—Ñ–æ–≤–∏—á'"""

        def save_employee(position):
            """–ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —ç—Ñ—Ñ–µ–∫—Ç–∞ on_change –≤–∏–¥–∂–µ—Ç–∞ –∏–∑ employee_choose.
            –ë–µ–∑ –Ω–µ–≥–æ –≤—ã–±–∏—Ä–∞–µ–º—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ session_state."""
            st.session_state[position] = st.session_state[position]

        st.selectbox('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π',
                     placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                     options=self.employees_on_shift(self.page_name),
                     index=None,
                     key=self.page_name,
                     on_change=save_employee, args=(self.page_name,))

    # –¢–æ–ª—å–∫–æ –Ω–∞ —Ä—É–∏–Ω–∞—Ö –ø—Ä–æ—à–ª–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–º–ø–µ—Ä–∏—é –±—É–¥—É—â–µ–≥–æ. –≠—Ç–æ—Ç –∫–æ—Å—Ç—ã–ª—å —Å—Ç–∞–ª –Ω–∞–¥—Å—Ç—Ä–æ–π–∫–æ–π –Ω–∞–¥ –∫–æ–≥–¥–∞-—Ç–æ —Å–ª–∞–≤–Ω—ã–º
    # –∫–ª–∞—Å—Å–æ–º, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Å—Ç–∞–ª—Å—è –ª–∏—à—å —Å–∫–µ–ª–µ—Ç
    def talon_button(self, row, index):
        file_name = f'{self.page_name}_talon_{index}.xlsx'
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∞

        if st.button(label=f":blue[**{self.talon_button_text}**]", key=file_name):
            template_path = 'static/guarantee.xlsx'
            wb = load_workbook(template_path)
            ws = wb.active

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            ws['B4'] = "–ú–∞—Ç—Ä–∞—Å –ê–†–¢.‚Ññ " + row['article'] + '  |  –ü–ë: ' + row['springs']

            ws['B6'] = row['size']

            ws['B8'] = row['deadline'].strftime('%d.%m.%Y')

            ws['B16'] = f"{row['client']}  {row['address']}" if row['address'] else '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –î–µ–º—É—Å–∞ 6–ê'

            file_path = fr'cash\{file_name}'
            wb.save(file_path)
            print_file(file_path)
            st.toast("–°–µ–π—á–∞—Å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç—Å—è —Ç–∞–ª–æ–Ω...", icon='üñ®Ô∏è')
            time.sleep(1)
            try:
                os.remove(file_path)
            except Exception:
                time.sleep(0.5)

    def label_button(self, row, index):
        article = row['article']
        if st.button(label=f":orange[**{self.label_button_text}**]", key=f"{article}_{index}"):
            try:
                file_path = fr"static\labels\{article}.pdf"
                print_file(file_path, self.label_printer_name)
            except FileNotFoundError:
                print_file("static\labels\800.pdf")

    @staticmethod
    def inner_box_text(row):
        """–ú–µ—Ç–æ–¥, –≤—ã–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –±–æ–∫—Å–∞. –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–ª–∏—Ç–∫–∞–º–∏ –∑–∞—è–≤–æ–∫ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥."""
        return (f"**–ê—Ä—Ç–∏–∫—É–ª:** {row.get('article')}  \n"
                f"**–¢–∫–∞–Ω—å**: {row.get('base_fabric')}  \n"
                f"**–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏**: {row.get('delivery_type')}  \n"
                f"**–ê–¥—Ä–µ—Å:** {row.get('address')}  \n"
                f"**–ö–ª–∏–µ–Ω—Ç:** {row.get('client')}  \n"
                f"**–í–µ—Ä—Ö/–ù–∏–∑**: {row.get('base_fabric')}  \n"
                f"**–ë–æ—á–∏–Ω–∞**: {row.get('side_fabric')}  \n"
                f"**–°–æ—Å—Ç–∞–≤:** {row.get('attributes')}  \n"
                f"**–†–∞–∑–º–µ—Ä:** {row.get('size')} ({side_eval(row.get('size'), row.get('side_fabric'))}  \n"
                f"**–°—Ä–æ–∫**: {get_date_str(row.get('deadline'))}  \n")

    def _form_box_text(self, index, row):
        # –¢–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫—Ä–∞—Å–∏—Ç—Å—è –≤ –∫—Ä–∞—Å–Ω—ã–π, –∫–æ–≥–¥–∞ —É –Ω–∞—Ä—è–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        text_color = 'red' if row['high_priority'] else 'gray'

        box_text = f':{text_color}[{self.inner_box_text(row)}'

        if row['comment']:
            box_text += f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π**: {row['comment']}  "

        box_text += ']'
        return box_text

    def show_tasks_tiles(self, data, stage_to_done: str, num_columns: int = 3) -> bool:
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í—ã–≤–æ–¥–∏—Ç –∑–∞—è–≤–∫–∏ –≤ –≤–∏–¥–µ –ø–ª–∏—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—è—Ç—Å—è, –∞ –ø–æ—Ç–æ–º, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ì–æ—Ç–æ–≤–æ" –Ω–∞ –∑–∞—è–≤–∫–µ, –ø–æ
        –∏–Ω–¥–µ–∫—Å—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—Å—è—Ç—Å—è —Å –≥–ª–∞–≤–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è"""
        main_data = super().load_tasks()
        page = self.page_name

        if len(data) == 0:
            return st.header('–í—Å–µ –∑–∞—è–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞ üèñÔ∏è')

        row_container = st.columns(num_columns)
        count = 0
        for index, row in data.iterrows():
            if count % num_columns == 0:
                row_container = st.columns(num_columns)

            box = row_container[count % num_columns].container(height=250, border=True)

            with box:
                photo = row['photo']
                if photo:
                    col1, col2, buff, col3 = st.columns([12, 3, 1, 6])
                    col2.image(photo, caption='–§–æ—Ç–æ', width=80)
                else:
                    col1, col3 = st.columns([3, 1])

                with col1:
                    st.markdown(self._form_box_text(index, row))
                with col3:
                    if page in st.session_state and st.session_state[page]:
                        employee = st.session_state[page]

                        if st.button(f":green[**{self.done_button_text}**]", key=f'{page}_done_{index}'):
                            history_note = f'({time_now()}) {page} [ {employee} ] -> {self.done_button_text}; \n'
                            main_data.at[index, stage_to_done] = True
                            main_data.at[index, 'history'] += history_note
                            save_to_file(main_data, self.task_cash)
                            st.rerun()

                        self.talon_button(row, index)
                        self.label_button(row, index)
            count += 1
        return True
