import streamlit as st
from utils import icon
from utils.tools import read_file, config, save_to_file, get_cash_rows_without, get_date_str

cash_file = config.get('site').get('cash_filepath')
st.set_page_config(page_title="–£–ø–∞–∫–æ–≤–∫–∞",
                   page_icon="üì¶",
                   layout="wide")

columns_to_display = ['article', 'deadline', 'address', 'comment']
@st.experimental_fragment(run_every="5s")
def show_packing_tasks():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    tasks = get_cash_rows_without('packing_is_done')
    for index, row in tasks.iterrows():
        comment = row.get('comment', '')
        deadline = get_date_str(row['deadline'])

        text_color = 'red' if row['high_priority'] else 'gray'
        box_text = f""":{text_color}[**–ê—Ä—Ç–∏–∫—É–ª:** {row['article']}
                                     **–†–∞–∑–º–µ—Ä**: {row['size']}
                                     **–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏**: {row['delivery_type']}
                                     **–ê–¥—Ä–µ—Å:** {row['address']}
                                     **–ö–ª–∏–µ–Ω—Ç:** {row.get('client')}
                                     **–°—Ä–æ–∫**: {deadline}"""
        if row['comment']:
            box_text += f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π**: {comment}  "

        box_text += ']'

    st.dataframe(sorted_df[columns_to_display],
                 column_config={'deadline': st.column_config.DateColumn("–î–∞—Ç–∞", format="DD.MM"),
                                'article': st.column_config.TextColumn("–ê—Ä—Ç–∏–∫—É–ª"),
                                'attributes': st.column_config.TextColumn("–°–æ—Å—Ç–∞–≤"),
                                'comment': st.column_config.TextColumn("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")})

'''    
        size = get_size_int(row['size'])
        side = side_eval(size, row['fabric'])
        deadline = get_date_str(row['deadline'])
        comment = row.get('comment', '')
        if count % num_columns == 0:
            row_container = st.columns(num_columns)
        box = row_container[count % num_columns].container(height=225, border=True)

        text_color = 'red' if row['high_priority'] else 'gray'

        box_text = f""":{text_color}[**–ê—Ä—Ç–∏–∫—É–ª:** {row['article']}  
                                     **–¢–∏–ø**: {row['fabric']}  
                                     **–†–∞–∑–º–µ—Ä:** {row['size']} ({side})  
                                     **–°—Ä–æ–∫**: {deadline}  """
        if row['comment']:
            box_text += f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π**: {comment}  "
        box_text += ']'

        with box:
            if box.button(":orange[**–í—ã–ø–æ–ª–Ω–µ–Ω–æ**]", key=index):
                data.at[index, 'fabric_is_done'] = True
                save_to_file(data, cash_file)
                st.rerun()
            box.markdown(box_text)'''


icon.show_icon("üì¶")
show_packing_tasks()
