import os
import time

from openpyxl.reader.excel import load_workbook

from utils.app_core import ManufacturePage
from utils.tools import config, save_to_file, time_now, print_file, get_date_str
import streamlit as st


class PackingPage(ManufacturePage):
    def __init__(self, name, icon):
        super().__init__(name, icon)
        self.talon_button_text = '–¢–∞–ª–æ–Ω'
        self.label_button_text = '–≠—Ç–∏–∫–µ—Ç–∫–∞'
        self.default_printer_name = config.get('site').get('hardware').get('default_printer')
        self.label_printer_name = config.get('site').get('hardware').get('label_printer')

    @staticmethod
    def inner_box_text(row):
        return (f"**–ê—Ä—Ç–∏–∫—É–ª:** {row['article']}  \n"
                f"**–†–∞–∑–º–µ—Ä**: {row['size']}  \n"
                f"**–¢–æ–ø:** {row['base_fabric']}  \n"
                f"**–ë–æ–∫:** {row['side_fabric']}  \n"
                f"**–ü–ë:** {row['springs']}  \n")

    def packing_tasks(self, file):
        data = super().load_tasks(file)
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞—Ä—è–¥—ã. –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–µ, —á—Ç–æ –Ω–µ –ø–æ—à–∏—Ç—ã,
        # –Ω–æ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ä–µ–∑–∞–ª–∏ —Ç–∫–∞–Ω—å –∏ —Å–æ–±—Ä–∞–ª–∏ –æ—Å–Ω–æ–≤—É.
        # –ù–µ –º–µ–Ω—è–π "==" –Ω–∞ "is" –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É PEP 8, –∏–Ω–∞—á–µ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.
        return data[(data['packing_is_done'] == False) &
                    (data['sewing_is_done'] == True)]

    def talon_button(self, file, row, index):
        document = f'{self.page_name}_talon_{index}.xlsx'
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏ —Ç–∞–ª–æ–Ω–∞

        if st.button(label=f":blue[**{self.talon_button_text}**]", key=f"{file}_{document}"):
            template_path = 'static/guarantee.xlsx'
            wb = load_workbook(template_path)
            ws = wb.active

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            ws['B4'] = "–ú–∞—Ç—Ä–∞—Å –ê–†–¢.‚Ññ " + row['article'] + '  |  –ü–ë: ' + row['springs']

            ws['B6'] = row['size']

            ws['B8'] = row['deadline'].strftime('%d.%m.%Y')

            ws['B16'] = f"{row['organization']}  {row['address']}" if row['address'] else '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –î–µ–º—É—Å–∞ 6–ê'

            document_path = fr'cash\{document}'
            wb.save(document_path)
            print_file(document_path, self.default_printer_name)
            st.toast("–°–µ–π—á–∞—Å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç—Å—è —Ç–∞–ª–æ–Ω...", icon='üñ®Ô∏è')
            time.sleep(1)
            try:
                os.remove(document_path)
            except Exception:
                time.sleep(0.5)

    def label_button(self, file, row, index):
        article = row['article']
        if st.button(label=f":orange[**{self.label_button_text}**]", key=f"{file}_{article}_{index}"):
            try:
                file_path = fr"static\labels\{article}.pdf"
                print_file(file_path, self.label_printer_name)
                st.toast("–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏...", icon='üñ®Ô∏è')
            except FileNotFoundError:
                st.toast("–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏. –®–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–∏–∫–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon='‚ùó')
                #print_file("static\labels\800.pdf")
            except Exception as e:
                st.toast(f"–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}")

    def _form_box_text(self, row):
        # –¢–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫—Ä–∞—Å–∏—Ç—Å—è –≤ –∫—Ä–∞—Å–Ω—ã–π, –∫–æ–≥–¥–∞ —É –Ω–∞—Ä—è–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        text_color = 'red' if row['high_priority'] else 'gray'

        box_text = f':{text_color}[{self.inner_box_text(row)}'

        if row['comment']:
            box_text += f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π**: {row['comment']}  "

        box_text += ']'
        return box_text

    def show_tasks_tiles(self, data, file, stage_to_done: str, num_columns: int = 3) -> bool:
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í—ã–≤–æ–¥–∏—Ç –∑–∞—è–≤–∫–∏ –≤ –≤–∏–¥–µ –ø–ª–∏—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—è—Ç—Å—è, –∞ –ø–æ—Ç–æ–º, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ì–æ—Ç–æ–≤–æ" –Ω–∞ –∑–∞—è–≤–∫–µ, –ø–æ
        –∏–Ω–¥–µ–∫—Å—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—Å—è—Ç—Å—è —Å –≥–ª–∞–≤–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è"""
        page = self.page_name
        main_data = super().load_tasks(file)

        if len(data) == 0:
            return st.header('–í—Å–µ –∑–∞—è–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞ üèñÔ∏è')

        row_container = st.columns(num_columns)
        count = 0
        for index, row in data.iterrows():
            if count % num_columns == 0:
                row_container = st.columns(num_columns)

            box = row_container[count % num_columns].container(border=True)

            with box:
                photo = row['photo']
                if photo:
                    st.image(photo, caption='–§–æ—Ç–æ', width=80)

                st.markdown(self._form_box_text(row))
                button_row_1, button_row_2, button_row_3 = st.columns([1, 1, 1])
                if page in st.session_state and st.session_state[page]:
                    employee = st.session_state[page]
                    with button_row_1:
                        if st.button(f":green[**{self.done_button_text}**]", key=f'{file}_{page}_done_{index}'):
                            history_note = f'({time_now()}) {page} [ {employee} ] -> {self.done_button_text}; \n'
                            main_data.at[index, stage_to_done] = True
                            main_data.at[index, 'history'] += history_note
                            save_to_file(main_data, file)
                            st.rerun()
                    with button_row_2:
                        self.talon_button(file, row, index)
                    with button_row_3:
                        self.label_button(file, row, index)
            count += 1
        return True

    @st.experimental_fragment(run_every="1s")
    def tiles_row(self):
        for file in self.task_cash.iterdir():
            # –ü–∞–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not file.is_file():
                continue

            # –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
            data = self.packing_tasks(file)
            if data.empty:
                continue

            row = data.iloc[0]
            date = get_date_str(row['deadline'])
            delivery_type = row['delivery_type']
            client = row['organization'] or row['contact']
            address = f"{row.get('address', '')}"
            region = f"{row.get('region', '')}"
            expander_text = f"{date}" if delivery_type == "–°–∞–º–æ–≤—ã–≤–æ–∑" else f"{date} | {address}"
            if region and delivery_type != "–°–∞–º–æ–≤—ã–≤–æ–∑":
                expander_text += f" | {region}"
            packing_title = f"#### {delivery_type}, {client}"
            st.markdown(packing_title)
            with st.expander(expander_text):
                self.show_tasks_tiles(data, file, 'packing_is_done', 4)
                st.divider()


Page = PackingPage("–£–ø–∞–∫–æ–≤–∫–∞", "üì¶")
Page.tiles_row()
