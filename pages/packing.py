import logging
import os
import time

from openpyxl.reader.excel import load_workbook
from win32ctypes.pywin32 import pywintypes

from utils.app_core import ManufacturePage
from utils.models import MattressRequest
from utils.tools import config, print_file, get_date_str
import streamlit as st


def form_box_text(task):
    # –¢–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫—Ä–∞—Å–∏—Ç—Å—è –≤ –∫—Ä–∞—Å–Ω—ã–π, –∫–æ–≥–¥–∞ —É –Ω–∞—Ä—è–¥–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    return ((':red' if task.high_priority else ':gray') +
            f"[**–ê—Ä—Ç–∏–∫—É–ª:** {task.article}  \n" +
            f"**–†–∞–∑–º–µ—Ä**: {task.size}  \n" +
            f"**–¢–æ–ø:** {task.base_fabric}  \n" +
            f"**–ë–æ–∫:** {task.side_fabric}  \n" +
            f"**–ü–ë:** {task.springs}  \n" +
            (f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π**: {task.comment}  " if task.comment else '') + "]")


class PackingPage(ManufacturePage):
    def __init__(self, name, icon):
        super().__init__(name, icon)
        self.default_printer_name = config.get('site').get('hardware').get('default_printer')
        self.label_printer_name = config.get('site').get('hardware').get('label_printer')

    def talon_button(self, order, task):
        if st.button(label=f":blue[**–¢–∞–ª–æ–Ω**]", key=f"print_talon_button_{task.id}"):
            template_path = 'static/guarantee.xlsx'
            wb = load_workbook(template_path)
            ws = wb.active

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            ws['B4'] = "–ú–∞—Ç—Ä–∞—Å –ê–†–¢.‚Ññ " + task.article + '  |  –ü–ë: ' + task.springs
            ws['B6'] = task.size
            ws['B8'] = task.deadline
            ws['B16'] = f"{order.organization} - {order.address}"

            document_path = fr'cash\{self.page_name}_talon_{order.id}.xlsx'
            wb.save(document_path)
            try:
                print_file(document_path, self.default_printer_name)
                st.toast("–ü–µ—á–∞—Ç—å —Ç–∞–ª–æ–Ω–∞...", icon='üñ®Ô∏è')
                time.sleep(1)
            except pywintypes.error as e:
                st.toast(f"–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}")
            try:
                os.remove(document_path)
            except Exception:
                time.sleep(0.5)
                os.remove(document_path)

    def label_button(self, task):

        if st.button(label=f":orange[**–≠—Ç–∏–∫–µ—Ç–∫–∞**]", key=f"print_label_button_{task.id}"):
            try:
                label_pdf_path = fr"static\labels\{task.article}.pdf"
                printer = self.label_printer_name

                print_file(label_pdf_path, printer)

                st.toast("–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏...", icon='üñ®Ô∏è')

            except FileNotFoundError:
                st.toast("–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏. –®–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–∏–∫–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", icon='‚ùó')

            except Exception as e:
                st.toast(f"–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}")

    def tasks_tiles(self, order, num_columns: int = 3):
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í—ã–≤–æ–¥–∏—Ç –∑–∞—è–≤–∫–∏ –≤ –≤–∏–¥–µ –ø–ª–∏—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—è—Ç—Å—è, –∞ –ø–æ—Ç–æ–º, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ì–æ—Ç–æ–≤–æ" –Ω–∞ –∑–∞—è–≤–∫–µ, –ø–æ
    –∏–Ω–¥–µ–∫—Å—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—Å—è—Ç—Å—è —Å –≥–ª–∞–≤–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è"""
        row_container = st.columns(num_columns)

        count = 0

        for task in order.mattress_requests:

            if (not task.components_is_done or
                not task.fabric_is_done or
                not task.gluing_is_done or
                not task.sewing_is_done or
                    task.packing_is_done):
                continue

            if count % num_columns == 0:
                row_container = st.columns(num_columns)

            box = row_container[count % num_columns].container(border=True)
            with box:
                main_row, photo_space, buffer = st.columns([18, 1, 1])
                photo = task.photo

                if photo:
                    main_row, photo_space, buffer = st.columns([10, 2, 2])
                    with photo_space:
                        st.image(photo, caption='–§–æ—Ç–æ', width=80)
                with main_row:
                    st.markdown(form_box_text(task))

                button_row_1, button_row_2, button_row_3 = st.columns([1, 1, 1])

                with button_row_1:
                    if st.button(f":green[**{self.done_button_text}**]", key=f'button_packing_done_{task.id}'):
                        history_note = f'{self.pages_history_note()} \n'
                        db_task = self.session.query(MattressRequest).get(task.id)

                        if db_task:
                            db_task.packing_is_done = True
                            db_task.history += history_note
                            self.update_db(db_task)
                        else:
                            logging.error(f"Task with id {task.id} not found in the database")
                        st.rerun()

                with button_row_2:
                    self.talon_button(order, task)

                with button_row_3:
                    self.label_button(task)

            count += 1

    @st.fragment(run_every=3)
    def tiles_rows(self):

        employee = st.session_state.get(self.page_name)
        if not employee:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
            return

        orders = self.get_orders_with_mattress_requests()
        if not orders:
            st.info("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å.")
            return

        for order in orders:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–∞—Ç—Ä–∞—Å—ã
            has_active_requests = any((request.sewing_is_done and
                                       not request.packing_is_done) for request in order.mattress_requests)

            if not has_active_requests:
                continue

            contact = order.organization or order.contact or '–ö–ª–∏–µ–Ω—Ç'
            delivery_type = order.delivery_type or '–°–∞–º–æ–≤—ã–≤–æ–∑'
            region = order.region if order.delivery_type != '–°–∞–º–æ–≤—ã–≤–æ–∑' else ''
            address = order.address or '–¶–µ—Ö'

            st.markdown(f"#### {region} {delivery_type}, {contact}, {address}")
            with st.expander(f"‚Ññ{order.id}: {get_date_str(order.created)}", expanded=True):
                self.tasks_tiles(order, 4)


Page = PackingPage("–£–ø–∞–∫–æ–≤–∫–∞", "üì¶")
Page.tiles_rows()
