import pandas as pd
import streamlit as st
from sqlalchemy import select
from streamlit import session_state as state

from utils.models import MattressRequest, Employee, EmployeeTask
from utils.app_core import Page
from utils.tools import barcode_link


class BrigadierPage(Page):
    def __init__(self, page_name, icon):
        super().__init__(page_name, icon)

        self.TASK_STATE = 'task_dataframe'

        self.SHOW_ALL_TASKS = 'MattressRequest_full_mode'
        if self.SHOW_ALL_TASKS not in state:
            state[self.SHOW_ALL_TASKS] = False

        self.REDACT_TASKS = 'MattressRequest_redact_mode'
        if self.REDACT_TASKS not in state:
            state[self.REDACT_TASKS] = False

    def mattress_editor(self, dataframe):
        return st.data_editor(data=dataframe,
                              column_config=self.tasks_columns_config,
                              column_order=(column for column in self.tasks_columns_config.keys()),
                              hide_index=False,
                              key=self.TASK_STATE,
                              height=650)

    def mattress_viewer(self, dataframe):
        st.dataframe(data=dataframe,
                     column_config=self.tasks_columns_config,
                     column_order=(column for column in self.tasks_columns_config.keys()),
                     hide_index=False,
                     key=self.TASK_STATE,
                     height=650)

    @st.fragment(run_every=1)
    def all_tasks(self):
        half_col_1, half_col_2 = st.columns([1, 1])
        with half_col_1:
            if state.get(self.REDACT_TASKS, False):
                st.error('##### –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.', icon="üöß")
            else:
                st.info('##### –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–∏–∑—É.', icon="üîé")

        with half_col_2:
            full_mode_checkbox = st.checkbox('### –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã', key=f"{self.SHOW_ALL_TASKS}_checkbox")
            state[self.SHOW_ALL_TASKS] = True if full_mode_checkbox else False

        df = self.get_sorted_tasks()

        if not state[self.SHOW_ALL_TASKS]:
            conditions = {
                'components_is_done': False,
                'fabric_is_done': False,
                'gluing_is_done': False,
                'sewing_is_done': False,
                'packing_is_done': False
            }
            df = self.filter_incomplete_tasks(df, conditions)

        if state.get(self.REDACT_TASKS, False):
            edited_df = self.mattress_editor(df)
            self.edit_mode_button(MattressRequest, edited_df)
        else:
            self.mattress_viewer(df)
            self.edit_mode_button(MattressRequest)

    def edit_mode_button(self, model, edited_dataframe=None):
        redact_mode = self.REDACT_TASKS
        if state.get(redact_mode, False):
            button_text = ":red[**–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞**]"
        else:
            button_text = '**–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**'

        if not st.button(button_text, key=f'{model}_mode_button'):
            return

        if state.get(redact_mode, False) and edited_dataframe is not None:
            self.save_mattress_df_to_db(edited_dataframe, model)
        state[redact_mode] = not state[redact_mode]

        # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è
        task_state = self.TASK_STATE
        if task_state in st.session_state:
            del st.session_state[task_state]

        st.rerun()

    @staticmethod
    def get_df_from_employees(employees):
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        data = []
        for employee in employees:
            row = {'id': employee.id,
                   'is_on_shift': employee.is_on_shift,
                   'name': employee.name,
                   'position': employee.position,
                   'barcode': barcode_link(employee.id),
                   '–£–¥–∞–ª–∏—Ç—å': False}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∫ False
            data.append(row)

        dataframe = pd.DataFrame(data)
        if 'id' in dataframe.columns:
            dataframe.set_index('id', inplace=True)

        return dataframe

    def employees_editor(self):
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        employees = self.session.query(Employee).all()

        df = self.get_df_from_employees(employees)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edited_df = st.data_editor(
            data=df,
            column_config=self.employee_columns_config,
            column_order=['is_on_shift', 'name', 'position', '–£–¥–∞–ª–∏—Ç—å', 'barcode'],
            hide_index=True,
            num_rows='fixed',
            key='employee_editor'
        )
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if st.button('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'):
            self.save_employee_changes(edited_df)

    def save_employee_changes(self, edited_df):
        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º DataFrame
        for index, row in edited_df.iterrows():
            employee = self.session.get(Employee, index)
            if employee:
                if row['–£–¥–∞–ª–∏—Ç—å']:
                    result = self.session.execute(select(EmployeeTask).where(EmployeeTask.employee_id == index))
                    employee_task = result.scalar_one_or_none()
                    self.session.delete(employee_task)
                    self.session.delete(employee)
                else:
                    employee.is_on_shift = row['is_on_shift']
                    employee.name = row['name']
                    employee.position = row['position']

        self.session.commit()
        st.rerun()

    def add_employee(self):
        with st.form(key='add_employee'):
            name = st.text_input("–ò–º—è")
            position = st.text_input("–†–æ–ª–∏", placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

            if st.form_submit_button("–í–Ω–µ—Å—Ç–∏"):
                if not name or not position:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è.")
                else:
                    new_employee = Employee(is_on_shift=False,
                                            name=name,
                                            position=position,
                                            barcode=None)
                    self.session.add(new_employee)
                    self.session.commit()
                    st.rerun()


Page = BrigadierPage('–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª', 'üõ†Ô∏è')
tasks_tab, employee_tab = st.tabs(['–ú–∞—Ç—Ä–∞—Å—ã', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'])

with tasks_tab:
    col1, col2 = st.columns([1, 2])
    with col1:
        st.title("üè≠ –í—Å–µ –Ω–∞—Ä—è–¥—ã")
    with col2:
        st.info('''–ù–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Ä—è–¥–∞—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ß—Ç–æ–±—ã –ø–æ–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–π
        –Ω–∞—Ä—è–¥, –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–Ω –æ–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º - –ø–æ–∫–∞ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è,
        –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ä–∞–±–æ—á–∏—Ö –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è. **–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—É!**''', icon="‚ÑπÔ∏è")

    Page.all_tasks()

with employee_tab:
    col1, col2 = st.columns([1, 2])
    with col1:
        st.title("üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    with col2:
        # –î–æ–ª–∂–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ —Å–≤–æ–π—Å—Ç–≤—É page_name –Ω–∞ —Ñ–∞–π–ª–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        st.info('–í—ã—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ä–∞–±–æ—á–∏—Ö –Ω–∞ —Å–º–µ–Ω—É. –û–Ω–∏ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–Ω—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞ –Ω—É–∂–Ω–æ–º —ç–∫—Ä–∞–Ω–µ.  \n'
                '–í –ø–æ–ª–µ "–†–æ–ª–∏" –ø—Ä–æ–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –ú–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.', icon="‚ÑπÔ∏è")

    st.warning('##### –î–æ—Å—Ç—É–ø–Ω–æ: –∑–∞–≥–æ—Ç–æ–≤–∫–∞, —Å–±–æ—Ä–∫–∞, –Ω–∞—Ä–µ–∑–∫–∞, —à–∏—Ç—å—ë, —É–ø–∞–∫–æ–≤–∫–∞')

    sub_col_1, sub_col_2 = st.columns([2, 1])
    with sub_col_1:
        Page.employees_editor()
    with sub_col_2:
        with st.expander("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"):
            Page.add_employee()
