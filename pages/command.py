import logging

import pandas as pd
import streamlit as st
from sqlalchemy.orm import joinedload

from utils.models import Order, MattressRequest, Employee
from utils.app_core import Page
from utils.tools import clear_cash, barcode_link


class BrigadierPage(Page):
    def __init__(self, page_name, icon):
        super().__init__(page_name, icon)

        self.TASK_STATE = 'task_dataframe'
        self.EMPLOYEE_STATE = 'employee_dataframe'
        self.SHOW_DONE_STATE = 'show_done'

        self.EMPLOYEE_ACTIVE_MODE = 'employee_active_mode'

    def show_and_hide_button(self, table_state, show_state, model, edited_df=None, order_id=None):
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
        if show_state not in st.session_state:
            st.session_state[show_state] = False

        if not st.session_state.get(show_state, False):
            button_text = '**–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**'
        else:
            button_text = ":red[**–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞**]"

        if st.button(button_text, key=f'{order_id}_mode_button'):
            # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è
            if st.session_state.get(show_state, False) and edited_df is not None:
                self.save_changes_to_db(edited_df, model)
            clear_cash(table_state)
            st.session_state[show_state] = not st.session_state[show_state]
            st.rerun()

    def get_orders_with_mattress_requests(self):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –ø–æ—Ä—è–¥–∫–µ id. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π Order.id.desc()
        return (self.session.query(Order)
                .options(joinedload(Order.mattress_requests))
                .order_by(Order.id.desc())
                .limit(50)
                .all())

    def edit_table(self, model, columns_config, columns_order, dynamic_mode=False, order_id=None,
                   state_key='state'):
        try:
            # Fetch data from the database
            if order_id:
                data_query = self.session.query(model).filter(MattressRequest.order_id == order_id).all()
            else:
                data_query = self.session.query(model).all()

            # Convert data to DataFrame
            data = []
            for item in data_query:
                row = item.__dict__.copy()
                row.pop('_sa_instance_state', None)
                data.append(row)
            df = pd.DataFrame(data)
            if 'id' in df.columns:
                df.set_index('id', inplace=True)

            # Additional processing (e.g., formatting barcode links)
            if model == Employee and 'barcode' in df.columns:
                df['barcode'] = df.index.to_series().apply(barcode_link).astype('string')

            # Adjust columns order based on dynamic_mode or other conditions
            if dynamic_mode and model == Employee:
                columns_order = ["name", "position"]

            edited_df = st.data_editor(
                df,
                column_config=columns_config,
                column_order=columns_order,
                hide_index=True,
                num_rows='dynamic' if dynamic_mode else 'fixed',
                key=f"{state_key}_editor"
            )

            return edited_df
        except Exception as e:
            st.error(f"An error occurred: {e}")
            logging.error(f"Error in edit_table: {e}", exc_info=True)
            st.rerun()

    def tasks_tables(self):
        orders = self.get_orders_with_mattress_requests()
        for order in orders:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–∞—Ç—Ä–∞—Å—ã
            has_active_requests = any(
                not (request.components_is_done and
                     request.fabric_is_done and
                     request.gluing_is_done and
                     request.sewing_is_done and
                     request.packing_is_done)
                for request in order.mattress_requests
            )

            if has_active_requests or st.session_state[self.SHOW_DONE_STATE]:
                # –í active_mode —Ö—Ä–∞–Ω–∏—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π session_state,
                # –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å/–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É".
                # –¢—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é show_table = False
                active_mode = f"{order.id}_active_mode"
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏ –¥–ª—è...
                full_mode = f"{order.id}_full_mode"
                if full_mode not in st.session_state:
                    st.session_state[full_mode] = False

                with st.expander(f'–ó–∞–∫–∞–∑ ‚Ññ{order.id} - {order.organization or order.contact or "- -"}', expanded=True):
                    state = self.TASK_STATE + str(order.id)
                    if st.session_state.get(active_mode, False):
                        st.error('##### –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.', icon="üöß")
                        editor = self.tasks_editor(order)
                        self.show_and_hide_button(state, active_mode, MattressRequest, edited_df=editor, order_id=order.id)
                    else:
                        self.show_and_hide_button(state, active_mode, MattressRequest, order_id=order.id)
                        self.tasks_table(order)

    def tasks_table(self, order):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—É—é —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–Ω–¥–µ–∫—Å–æ–≤."""

        columns = self.tasks_columns_config
        data = []
        order_full_mode = f"{order.id}_full_mode"

        # –¢–∞–∫ —Å–¥–µ–ª–∞–Ω–æ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ —Ç—É—Ç, —á—Ç–æ–±—ã
        # –Ω–µ–ª—å–∑—è –±—ã–ª–æ –º–µ–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤–æ –≤—Ä–µ–º—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        full_mode_checkbox = st.checkbox('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –Ω–∞—Ä—è–¥—ã', key=f"{order_full_mode}_checkbox")
        if full_mode_checkbox:
            st.session_state[order_full_mode] = True
        else:
            st.session_state[order_full_mode] = False

        for mattress_request in order.mattress_requests:
            if st.session_state[order_full_mode] or not (
                    mattress_request.components_is_done and
                    mattress_request.fabric_is_done and
                    mattress_request.gluing_is_done and
                    mattress_request.sewing_is_done and
                    mattress_request.packing_is_done
            ):
                row = {
                    'high_priority': mattress_request.high_priority,
                    'deadline': mattress_request.deadline,
                    'article': mattress_request.article,
                    'size': mattress_request.size,
                    'base_fabric': mattress_request.base_fabric,
                    'side_fabric': mattress_request.side_fabric,
                    'photo': mattress_request.photo,
                    'comment': mattress_request.comment,
                    'springs': mattress_request.springs,
                    'attributes': mattress_request.attributes,
                    'components_is_done': mattress_request.components_is_done,
                    'fabric_is_done': mattress_request.fabric_is_done,
                    'gluing_is_done': mattress_request.gluing_is_done,
                    'sewing_is_done': mattress_request.sewing_is_done,
                    'packing_is_done': mattress_request.packing_is_done,
                    'history': mattress_request.history,
                    'organization': order.organization,
                    'delivery_type': order.delivery_type,
                    'address': order.address,
                    'region': order.region,
                    'created': mattress_request.created,
                }
                data.append(row)

        df = pd.DataFrame(data)

        if not df.empty:
            st.dataframe(data=df,
                         column_config=columns,
                         column_order=(column for column in columns.keys()),
                         hide_index=True)
        else:
            st.write('–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—è–¥–æ–≤ –Ω–µ—Ç')

    def tasks_editor(self, order):
        # Define filter conditions for the tasks
        columns_order = list(self.tasks_columns_config.keys())

        state_key = f"tasks_state_{order.id}"

        return self.edit_table(
            model=MattressRequest,
            columns_config=self.tasks_columns_config,
            columns_order=columns_order,
            order_id=order.id,
            state_key=state_key,
        )

    def get_employees(self):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –ø–æ—Ä—è–¥–∫–µ id. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π Order.id.desc()
        return self.session.query(Employee).all()

    def add_employee(self):
        with st.form(key='add_employee'):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
            st.markdown("#### –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")

            # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            name = st.text_input("–ò–º—è")
            position = st.text_input("–†–æ–ª–∏", placeholder="–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"):
                if name and position:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
                    new_employee = Employee(
                        is_on_shift=False,
                        name=name,
                        position=position,
                        barcode=None,
                    )
                    self.session.add(new_employee)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–µ—Å—Å–∏—é
                    self.session.commit()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    st.success("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                else:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.")

    def employees_editor(self, dynamic_mode: bool = False):
        columns_order = ["is_on_shift", "name", "position", "barcode"]
        if dynamic_mode:
            columns_order = ["name", "position"]
        self.edit_table(
            model=Employee,
            columns_config=self.employee_columns_config,
            columns_order=columns_order,
            state_key=self.EMPLOYEE_STATE,
        )


Page = BrigadierPage('–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª', 'üõ†Ô∏è')

tasks_tab, employee_tab = st.tabs(['–ù–∞—Ä—è–¥—ã', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'])

with tasks_tab:
    col1, col2 = st.columns([1, 2])

    with col1:
        st.title("üè≠ –í—Å–µ –Ω–∞—Ä—è–¥—ã")

        if st.checkbox('–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏', key=f"{Page.SHOW_DONE_STATE}_key"):
            st.session_state[Page.SHOW_DONE_STATE] = True
        else:
            st.session_state[Page.SHOW_DONE_STATE] = False

    with col2:
        st.write(' ')
        st.info('''–ù–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Ä—è–¥–∞—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ß—Ç–æ–±—ã –ø–æ–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–π
        –Ω–∞—Ä—è–¥, –≤–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–Ω –æ–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º - –ø–æ–∫–∞ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è,
        –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ä–∞–±–æ—á–∏—Ö –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è. **–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—É!**''', icon="‚ÑπÔ∏è")

    Page.tasks_tables()

with employee_tab:
    col1, col2 = st.columns([1, 2])

    with col1:
        st.title("üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")

    with col2:
        st.write(' ')
        # –î–æ–ª–∂–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ —Å–≤–æ–π—Å—Ç–≤—É page_name –Ω–∞ —Ñ–∞–π–ª–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        st.info('–í—ã—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ä–∞–±–æ—á–∏—Ö –Ω–∞ —Å–º–µ–Ω—É. –û–Ω–∏ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–Ω—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞ –Ω—É–∂–Ω–æ–º —ç–∫—Ä–∞–Ω–µ. –í –ø–æ–ª–µ'
                '"–†–æ–ª–∏" –ø—Ä–æ–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –ú–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.  \n'
                '–î–æ—Å—Ç—É–ø–Ω–æ: –∑–∞–≥–æ—Ç–æ–≤–∫–∞, —Å–±–æ—Ä–∫–∞, –Ω–∞—Ä–µ–∑–∫–∞, —à–∏—Ç—å—ë, —É–ø–∞–∫–æ–≤–∫–∞',
                icon="‚ÑπÔ∏è")

    col1, col2 = st.columns([1, 1])
    with col1:
        Page.employees_editor(dynamic_mode=st.session_state.get(Page.EMPLOYEE_ACTIVE_MODE, False))
        Page.add_employee()
        # Toggle between modes if needed
        if st.button("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"):
            st.session_state[Page.EMPLOYEE_ACTIVE_MODE] = not st.session_state.get(Page.EMPLOYEE_ACTIVE_MODE, False)

    with col2:
        pass

