import pandas as pd
import streamlit as st

from utils.app_core import ManufacturePage
from utils.models import MattressRequest
from utils.tools import time_now


class ComponentsPage(ManufacturePage):
    def __init__(self, page_name, icon, columns_order):
        super().__init__(page_name, icon)
        self.columns_order = columns_order
        self.components_columns_config = {
            'components_is_done': st.column_config.CheckboxColumn("–ì–æ—Ç–æ–≤–æ"),
            'deadline': st.column_config.DateColumn("–î–∞—Ç–∞", format="DD.MM"),
            'article': st.column_config.TextColumn("–ê—Ä—Ç–∏–∫—É–ª"),
            'size': st.column_config.TextColumn("–†–∞–∑–º–µ—Ä"),
            'attributes': st.column_config.TextColumn("–°–æ—Å—Ç–∞–≤", width='large'),
            'comment': st.column_config.TextColumn("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", width='medium'),
            'photo': st.column_config.ImageColumn("–§–æ—Ç–æ"),
            'history': st.column_config.TextColumn("Bcnjhbz", width='large')  # Include history for updates
        }

    def components_tasks(self):
        mattress_requests = self.load_tasks()
        data = []
        for task in mattress_requests:
            if not (task.components_is_done or
                    task.sewing_is_done or
                    task.gluing_is_done or
                    task.packing_is_done):
                row = {
                    'id': task.id,
                    'components_is_done': task.components_is_done,
                    'deadline': task.deadline,
                    'article': task.article,
                    'size': task.size,
                    'attributes': task.attributes,
                    'comment': task.comment,
                    'photo': task.photo,
                    'history': task.history  # Include history for updates
                }
                data.append(row)

        if not data:
            return None

        df = pd.DataFrame(data)
        df.set_index('id', inplace=True)  # Set 'id' as the index
        return df

    @st.fragment(run_every=2)
    def components_frame(self):

        employee = st.session_state.get(self.page_name)
        if not employee:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
            return

        tasks = self.components_tasks()
        if tasks is None or tasks.empty:
            st.info("–°—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞—Ä–µ–∑–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.")
            return

        return st.data_editor(tasks[self.columns_order],
                              column_config=self.components_columns_config,
                              hide_index=True)

    def components_table(self):
        submit = st.button(label='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')

        original_df = self.components_tasks()
        edited_df = self.components_frame()

        if not submit or edited_df is None:
            return

        self.update_tasks(original_df, edited_df, 'components_is_done')
        self.save_changes_to_db(original_df, MattressRequest)
        st.rerun()


Page = ComponentsPage(page_name='–ó–∞–≥–æ—Ç–æ–≤–∫–∞',
                      icon="üß±",
                      columns_order=['components_is_done', 'article', 'size', 'attributes', 'comment',
                                     'photo'])

col_table, col_info = st.columns([4, 1])

with col_table:
    Page.components_table()

with col_info:
    st.info('–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—è–¥—ã, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã. ', icon="‚ÑπÔ∏è")
    st.info('–ú–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –º–Ω–æ–≥–æ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞ —Ä–∞–∑ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"', icon="‚ÑπÔ∏è")
